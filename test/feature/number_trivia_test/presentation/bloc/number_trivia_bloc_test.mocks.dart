// Mocks generated by Mockito 5.4.4 from annotations
// in number_trivia/test/feature/number_trivia_test/presentation/bloc/number_trivia_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:number_trivia/core/error/failure.dart' as _i7;
import 'package:number_trivia/core/usercases/usecase.dart' as _i9;
import 'package:number_trivia/core/utils/input_convertor.dart' as _i4;
import 'package:number_trivia/feature/number_trivia/domain/entities/number_trivia.dart'
    as _i8;
import 'package:number_trivia/feature/number_trivia/domain/repositories/number_trivia_repository.dart'
    as _i3;
import 'package:number_trivia/feature/number_trivia/domain/usecases/get_concreate_number_trivia.dart'
    as _i10;
import 'package:number_trivia/feature/number_trivia/domain/usecases/get_random_number_trivia.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNumberTriviaRepository_1 extends _i1.SmartFake
    implements _i3.NumberTriviaRepository {
  _FakeNumberTriviaRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InputConvertor].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConvertor extends _i1.Mock implements _i4.InputConvertor {
  MockInputConvertor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<_i4.InvalidInputFailure, int> stringToUnsignedInteger(
          String? str) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringToUnsignedInteger,
          [str],
        ),
        returnValue: _FakeEither_0<_i4.InvalidInputFailure, int>(
          this,
          Invocation.method(
            #stringToUnsignedInteger,
            [str],
          ),
        ),
      ) as _i2.Either<_i4.InvalidInputFailure, int>);
}

/// A class which mocks [GetRandomNumberTrivia].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomNumberTrivia extends _i1.Mock
    implements _i5.GetRandomNumberTrivia {
  MockGetRandomNumberTrivia() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.NumberTriviaRepository get numberTriviaRepository => (super.noSuchMethod(
        Invocation.getter(#numberTriviaRepository),
        returnValue: _FakeNumberTriviaRepository_1(
          this,
          Invocation.getter(#numberTriviaRepository),
        ),
      ) as _i3.NumberTriviaRepository);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.NumberTrivia>> call(
          {required _i9.NoParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, _i8.NumberTrivia>>.value(
                _FakeEither_0<_i7.Failure, _i8.NumberTrivia>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.NumberTrivia>>);
}

/// A class which mocks [GetConcreteNumberTrivia].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConcreteNumberTrivia extends _i1.Mock
    implements _i10.GetConcreteNumberTrivia {
  MockGetConcreteNumberTrivia() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.NumberTriviaRepository get numberTriviaRepository => (super.noSuchMethod(
        Invocation.getter(#numberTriviaRepository),
        returnValue: _FakeNumberTriviaRepository_1(
          this,
          Invocation.getter(#numberTriviaRepository),
        ),
      ) as _i3.NumberTriviaRepository);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.NumberTrivia>> call(
          {required _i10.Params? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, _i8.NumberTrivia>>.value(
                _FakeEither_0<_i7.Failure, _i8.NumberTrivia>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.NumberTrivia>>);
}
